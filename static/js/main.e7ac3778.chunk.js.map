{"version":3,"sources":["components/yugiohCard/YugiohCard.js","views/home/Home.js","components/display/gridDisplay/GridDisplay.js","components/display/listDisplay/ListDisplay.js","views/cards/Cards.js","assets/img/ygo-bg.jpg","views/about/About.js","assets/img/cardbackYuGiOh.jpg","views/yugiohCardDetails/YugiohCardDetails.js","assets/img/logo_unimib.png","assets/img/logo_disco.png","components/footer/Footer.js","assets/img/logo.png","components/header/Header.js","components/mainTemplate/MainTemplate.js","App.js","reportWebVitals.js","index.js"],"names":["YugiohCard","props","displayType","cardID","detailsUrl","apiUrl","useState","error","setError","isLoaded","setIsLoaded","card","setCard","cardImage","setCardImage","useEffect","fetch","then","res","json","result","fullCardDetails","data","name","type","desc","replaceAll","substring","atk","def","level","race","extractCardDetails","card_images","image_url","message","body","inverse","className","to","src","Home","cardsID","CardsData","home","cards","map","GridDisplay","matrix","cardsId","temp","cardId","push","length","arrayToMatrix","createCols","array","cols","rows","createRows","ListDisplay","items","createItems","Cards","deckParam","useParams","deck","undefined","displayGrid","setDisplayGrid","deckFilterButtons","buttons","clsx","active","decks","deckItem","url","owner","createButtonFilter","concat","getDeck","changeDisplay","event","id","target","onClick","About","ygobg","YugiohCardDetails","atkDef","class","cardback","borderless","dark","Footer","lastLineText","first_logo_url","second_logo_url","listItems","pageListItem","item","text","brSpaces","i","href","first_logo","second_logo","Header","isToogleOpen","setIsToogleOpen","full","expand","fixed","logo","isOpen","navbar","MainTemplate","pageBody","children","App","exact","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7ac3778.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {Button, Card, CardBody, CardHeader, CardImg, ListGroupItem} from 'reactstrap';\r\n\r\nimport {Link} from \"react-router-dom\";\r\nimport './YugiohCard.css';\r\n\r\n/*\r\n    Hook component\r\n*/\r\nfunction YugiohCard(props) {\r\n    const displayType = props.displayType;\r\n    const cardID = props.cardID;\r\n    const detailsUrl = \"/tasd_project/card/\" + cardID;\r\n    const apiUrl = props.apiUrl;\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [card, setCard] = useState({});\r\n    const [cardImage, setCardImage] = useState(\"\");\r\n\r\n    /*\r\n    This function allow you to extract the data json to string\r\n    */\r\n    const extractCardDetails = function (card) {\r\n        return {\r\n            name: card.name,\r\n            type: card.type,\r\n            desc: card.desc.replaceAll(\"'\", \"\").substring(0, 25) + '...',\r\n            atk: card.atk,\r\n            def: card.def,\r\n            level: card.level,\r\n            race: card.race\r\n        }\r\n    }\r\n\r\n    /*\r\n        This hook component calls the API's and it sets the response in both cases of success and error\r\n    */\r\n    useEffect(() => {\r\n        fetch(apiUrl + '?id=' + cardID)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    setIsLoaded(true);\r\n                    let fullCardDetails = result.data[0];\r\n                    setCard(extractCardDetails(fullCardDetails));\r\n                    setCardImage(fullCardDetails.card_images[0].image_url)\r\n                },\r\n                (error) => {\r\n                    setIsLoaded(true);\r\n                    setError(error);\r\n                }\r\n            )\r\n    });\r\n\r\n    if (error) {\r\n        return <div>Error: {error.message}</div>;\r\n    } else if (!isLoaded) {\r\n        return <div>Loading...</div>;\r\n    } else {\r\n        if (displayType === 'grid') {\r\n            return (\r\n                <>\r\n                    <Card body inverse className=\"bg-dark d-flex h-100 card-grid\">\r\n                        <Link to={detailsUrl} className=\"yugioh-card-grid\">\r\n                            <CardImg src={cardImage}/>\r\n                            <div className=\"choice-me-grid\">\r\n                                Choice me!\r\n                            </div>\r\n                        </Link>\r\n                        <CardHeader className=\"d-flex h-100\"><h2 className=\"card-title-grid\">{card.name}</h2>\r\n                        </CardHeader>\r\n                        <CardBody>\r\n                            <Link to={detailsUrl}>\r\n                                <Button className=\"my-btn\">View card</Button>\r\n                            </Link>\r\n                        </CardBody>\r\n                    </Card>\r\n                </>\r\n            );\r\n        } else if (displayType === 'list') {\r\n            return (\r\n                <>\r\n                    <ListGroupItem className=\"bg-dark text-white d-flex mb-3\">\r\n                        <div className=\"container\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-3\">\r\n                                    <Link to={detailsUrl} className=\"yugioh-card-list\">\r\n                                        <img src={cardImage}/>\r\n                                    </Link>\r\n                                </div>\r\n                                <div className=\"col-9\">\r\n                                    <h2>{card.name}</h2>\r\n                                    <Link to={detailsUrl}>\r\n                                        <Button className=\"my-btn\">View card</Button>\r\n                                    </Link>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </ListGroupItem>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default YugiohCard;","import React from 'react';\r\nimport YugiohCard from '../../components/yugiohCard/YugiohCard';\r\nimport CardsData from '../../assets/data/info';\r\n\r\nfunction Home(props) {\r\n    const cardsID = CardsData.home;\r\n    const apiUrl = props.apiUrl;\r\n    /*\r\n\r\n    */\r\n    const cards = cardsID.map((cardID) => {\r\n        return (\r\n            <div className='col-md col-sm-12'>\r\n                <YugiohCard cardID={cardID} apiUrl={apiUrl} displayType='grid'/>\r\n            </div>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <h1 className='text-center'>Home</h1>\r\n            <hr/>\r\n            <div className='container'>\r\n                <div className='row'>\r\n                    {cards}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport YugiohCard from '../../yugiohCard/YugiohCard';\r\n\r\n/*\r\n    GridDisplay is a stateless component which sets the layout of all cards for the grid view\r\n*/\r\nfunction GridDisplay(props) {\r\n    /* This function is needed to create a matrix composed by rows of 4 elements starting from\r\n    an array of IDs (the cards)*/\r\n    const arrayToMatrix = function (cardsId) {\r\n        const matrix = [];\r\n        let temp = [];\r\n        for (let cardId of cardsId) {\r\n            temp.push(cardId);\r\n            if (temp.length === 4) {\r\n                matrix.push(temp);\r\n                temp = [];\r\n            }\r\n        }\r\n        /*This if is used to deny that, if the array length is shorter than 4, the last elements\r\n        are lost.\r\n        */\r\n        if (temp.length > 0) {\r\n            matrix.push(temp);\r\n        }\r\n        return matrix;\r\n    }\r\n\r\n    const matrix = arrayToMatrix(props.cardsId);\r\n    const apiUrl = props.apiUrl;\r\n\r\n    /*\r\n    This function is needed to \"convert\" the items of the array (row) of the matrix into\r\n    columns (create columns).\r\n    */\r\n    const createCols = function (array) {\r\n        //\r\n        const cols = [];\r\n        for (let cardID of array) {\r\n            cols.push(\r\n                <div className='col-md col-sm-12'>\r\n                    <YugiohCard cardID={cardID} apiUrl={apiUrl} displayType='grid'/>\r\n                </div>\r\n            );\r\n        }\r\n        return cols;\r\n    }\r\n\r\n    /*\r\n    This function is needed to \"convert\" the array of the matrix into rows (create row)\r\n    The rows created have also columns. This structure will be rendered by the return into a \r\n    div with class name container.\r\n    */\r\n    const createRows = function () {\r\n        const rows = [];\r\n        for (let array of matrix) {\r\n            const cols = createCols(array);\r\n            rows.push(\r\n                <div className='row mb-5'>\r\n                    {cols}\r\n                </div>\r\n            );\r\n        }\r\n        return rows;\r\n    }\r\n\r\n    const rows = createRows();\r\n\r\n    return (\r\n        <>\r\n            <div className='container'>\r\n                {rows}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GridDisplay;","import React from 'react';\r\nimport YugiohCard from '../../yugiohCard/YugiohCard';\r\nimport {ListGroup} from 'reactstrap';\r\n\r\n/*\r\n    ListDisplay is a stateless component which sets the layout of all cards for the list view\r\n*/\r\nfunction ListDisplay(props) {\r\n    const cardsId = props.cardsId;\r\n    const apiUrl = props.apiUrl;\r\n\r\n    /*\r\n        This function is needed to \"convert\" the IDs of the cards into a listItem of a ListGroup.\r\n        Precisely, the listItem component is called YugiohcardList which is the card with the list-layout.\r\n\r\n        */\r\n\r\n    const createItems = function () {\r\n        const items = [];\r\n        for (let cardID of cardsId) {\r\n            items.push(<ListGroup>\r\n                <YugiohCard cardID={cardID} apiUrl={apiUrl} displayType='list'/>\r\n            </ListGroup>);\r\n        }\r\n        return items;\r\n    }\r\n    const items = createItems();\r\n    return (\r\n        <>\r\n            <div className='container'>\r\n                {items}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ListDisplay;","import {React, useState} from 'react';\r\nimport {Link, useParams} from \"react-router-dom\";\r\nimport CardsData from '../../assets/data/info';\r\nimport {Button, ButtonGroup} from 'reactstrap';\r\nimport clsx from 'clsx';\r\nimport GridDisplay from '../../components/display/gridDisplay/GridDisplay';\r\nimport ListDisplay from '../../components/display/listDisplay/ListDisplay';\r\nimport './Cards.css';\r\n\r\n/*\r\n    Component statefull with a props apiUrl and a hook useParams\r\n*/\r\nfunction Cards(props) {\r\n\r\n    const apiUrl = props.apiUrl;\r\n    const deckParam = useParams().deck;\r\n    /*\r\n    If the deck parameter isn't set then deck is set to all, otherwise is set to deckParam (new route= /:deck)\r\n   */\r\n    const deck = (deckParam === undefined) ? 'all' : deckParam;\r\n    const [displayGrid, setDisplayGrid] = useState(true);\r\n\r\n    /*\r\n        This function creates the buttons of the filter:\r\n        - the general one that links all the cards by the attribute to=\"/cards\"\r\n        - the specific ones (the owner's deck) that links to the new route /cards/:deck that is defined accessing to\r\n        owner's name field of every object of the array inside the decks field (found in CardsData.json).\r\n    */\r\n    const createButtonFilter = function () {\r\n        const allButton = <Link to=\"/tasd_project/cards\">\r\n            <Button className={clsx({active: (deck === 'all'), 'my-btn': true, 'm-1': true})}>\r\n                All\r\n            </Button>\r\n        </Link>;\r\n        let buttons = [allButton];\r\n        for (let deckItem of CardsData.decks) {\r\n            const url = \"/tasd_project/cards/\" + deckItem.owner\r\n            buttons.push(\r\n                <Link to={url}>\r\n                    <Button\r\n                        className={clsx({active: (deck === deckItem.owner), 'my-btn': true, 'm-1': true})}>\r\n                        {deckItem.owner}\r\n                    </Button>\r\n                </Link>\r\n            );\r\n        }\r\n        return buttons;\r\n    }\r\n\r\n    const deckFilterButtons = createButtonFilter();\r\n\r\n    /*\r\n    This function get cards we want display with the filter.\r\n    This is the \"real\" filter.\r\n    With a for-loop we want to get all of the cards or the card for every owner field\r\n    presented in CardsData.json\r\n    if the deck is all (the deckParam on the url is undefined) then the cards displayed are a concatenation of all owners deck.\r\n    Otherwise, if deck is equal to a specific owner then only his cards are displayed.\r\n    */\r\n    const getDeck = function () {\r\n        let cards = [];\r\n        for (let deckItem of CardsData.decks) {\r\n            if (deck === 'all' || deck === deckItem.owner) {\r\n                cards = cards.concat(deckItem.cards)\r\n            }\r\n        }\r\n        return cards\r\n    }\r\n\r\n    const cardsID = getDeck();\r\n\r\n    /*\r\n     This function get cards with different layout according to the value of displayGrid that is\r\n     dynamically changed onclick event over filter buttons.\r\n    */\r\n    const getCards = function () {\r\n        if (displayGrid === true) {\r\n            return <GridDisplay cardsId={cardsID} apiUrl={apiUrl}/>\r\n        } else {\r\n            return <ListDisplay cardsId={cardsID} apiUrl={apiUrl}/>\r\n        }\r\n    }\r\n\r\n    const cards = getCards();\r\n\r\n    /*\r\n    This function change the type of display according to the 'id' button\r\n    if 'id' button is grid, it sets the hook displayGrid to true.\r\n    Otherwise it sets it to false. This allows the toogle effect to the display button exploiting the clsx (conditional\r\n    classes) and it automatically changes the type of card displayed (GridDisplay component or ListDisplay component\r\n    according to the getCards function)\r\n     */\r\n    const changeDisplay = function (event) {\r\n        const id = event.target.id;\r\n        if (id === 'isGrid') {\r\n            setDisplayGrid(true);\r\n        } else {\r\n            setDisplayGrid(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h1 className='text-center'>Cards</h1>\r\n            <hr/>\r\n            <div className='container'>\r\n                <div className='row'>\r\n                    <div className='col-11'>\r\n                        Decks:\r\n                        <ButtonGroup>\r\n                            {deckFilterButtons}\r\n                        </ButtonGroup>\r\n                    </div>\r\n                    <div className='col-1'>\r\n                        <ButtonGroup>\r\n                            <Button onClick={changeDisplay} id=\"isGrid\"\r\n                                    className={clsx({\r\n                                        active: displayGrid === true,\r\n                                        'my-btn': true,\r\n                                        'mt-1': true\r\n                                    })}>Grid</Button>\r\n                            <Button onClick={changeDisplay} id=\"isList\"\r\n                                    className={clsx({\r\n                                        active: displayGrid === false,\r\n                                        'my-btn': true,\r\n                                        'mt-1': true\r\n                                    })}>List</Button>\r\n                        </ButtonGroup>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <br/>\r\n            {cards}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Cards;","export default __webpack_public_path__ + \"static/media/ygo-bg.3b46fbc7.jpg\";","import React from 'react';\r\nimport './About.css';\r\nimport ygobg from '../../assets/img/ygo-bg.jpg';\r\n\r\nfunction About() {\r\n    return (\r\n        <>\r\n            <h1 className='text-center'>About</h1>\r\n            <hr/>\r\n            <div className='container'>\r\n                <div className='row plot'>\r\n                    <div className='col '><p>Yu-Gi-Oh! (遊☆戯☆王ＹＵ－ＧＩ－ＯＨ！ Yūgiō, Japanese for \"Game King\" or \"King of\r\n                        Games\") is a popular Japanese anime and manga franchise from Kazuki Takahashi that mainly\r\n                        involves characters who play a card game called Duel Monsters (originally called Magic and\r\n                        Wizards in the manga).</p>\r\n                    </div>\r\n                </div>\r\n                <div className='row'>\r\n                    <div className='col offset-md-5'>\r\n                        <h2>Plot</h2>\r\n                    </div>\r\n                </div>\r\n                <div className='row'>\r\n                    <div className='col-5 backg'>\r\n                        <img src={ygobg}/>\r\n                    </div>\r\n                    <div className='col md-6'>\r\n                        <p className='plot'>Yu-Gi-Oh! tells the tale of Yugi Mutou, a timid young boy who loves all\r\n                            sorts of games, but is often bullied around. One day, he solves an ancient puzzle known as\r\n                            the Millennium Puzzle (千年パズル, Sennen Pazuru), causing his body to play host to a mysterious\r\n                            spirit with the personality of a gambler. From that moment onwards, whenever Yugi or one of\r\n                            his friends is threatened by those with darkness in their hearts, this other Yugi shows\r\n                            himself and challenges them to dangerous Shadow Games (闇のゲーム, Yami no Gēmu, lit. \"Games of\r\n                            Darkness\") which reveal the true nature of someone's heart, the losers of these contests\r\n                            often being subjected to a dark punishment called a Penalty Game (罰ゲーム, Batsu Gēmu). Whether\r\n                            it be cards, dice, or role-playing board games, he will take on challenges from anyone,\r\n                            anywhere.\r\n                            As the series progresses, Yugi and his friends learn that this person inside of his puzzle\r\n                            is actually the spirit of a nameless Pharaoh from Ancient Egyptian times, who had lost his\r\n                            memories. As Yugi and his companions attempt to help the Pharaoh regain his memories, they\r\n                            find themselves going through many trials as they wager their lives facing off against\r\n                            gamers that wield the mysterious Millennium Items (千年アイテム, Sennen Aitemu) and the dark power\r\n                            of the Shadow Games.</p>\r\n                    </div>\r\n                    <div className='row plot'>\r\n                        <div className='col'>\r\n                            <p className=''>Here you will see the first edition cards, in particular, you could chooce\r\n                                among Yugi's deck, Seto's deck and Katsuya's deck.</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default About;","export default __webpack_public_path__ + \"static/media/cardbackYuGiOh.34b52553.jpg\";","import React, {useEffect, useState} from \"react\";\r\nimport {Button, Table} from 'reactstrap';\r\nimport {Link, useParams} from \"react-router-dom\";\r\nimport './YugiohCardDetails.css';\r\nimport cardback from '../../assets/img/cardbackYuGiOh.jpg';\r\n\r\n\r\nfunction YugiohCardDetails(props) {\r\n    const cardID = useParams().id;\r\n    const apiUrl = props.apiUrl;\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [card, setCard] = useState({});\r\n    const [cardImage, setCardImage] = useState(\"\");\r\n\r\n    const extractCardDetails = function (card) {\r\n        return {\r\n            name: card.name,\r\n            type: card.type,\r\n            desc: card.desc.replaceAll(\"'\", \"\"),\r\n            atk: card.atk,\r\n            def: card.def,\r\n            level: card.level,\r\n            race: card.race\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        fetch(apiUrl + '?id=' + cardID)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    setIsLoaded(true);\r\n                    let fullCardDetails = result.data[0];\r\n                    setCard(extractCardDetails(fullCardDetails));\r\n                    setCardImage(fullCardDetails.card_images[0].image_url)\r\n                },\r\n                (error) => {\r\n                    setIsLoaded(true);\r\n                    setError(error);\r\n                }\r\n            )\r\n    });\r\n\r\n    if (error) {\r\n        return <div>Error: {error.message}</div>;\r\n    } else if (!isLoaded) {\r\n        return <div>Loading...</div>;\r\n    } else {\r\n        let atkDef = (<div></div>);\r\n        if (card.atk !== undefined && card.def !== undefined) {\r\n            atkDef = (\r\n                <div className=\"col-12 m-4\">\r\n                    <div className=\"row text-center\">\r\n                        <div className=\"col-md col-sm-12\">\r\n                            ATTACK\r\n                        </div>\r\n\r\n                        <div className=\"col-md col-sm-12\">\r\n                            DEFENSE\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row text-center\">\r\n                        <div className=\"col-md col-sm-12 atk-def\">\r\n                            {card.atk}\r\n                        </div>\r\n                        <div className=\"col-md col-sm-12 atk-def\">\r\n                            {card.def}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <>\r\n                <div className=\"container\">\r\n                    <div className=\"row m-5\">\r\n                        <div className=\"col-md-2 col-sm-12\">\r\n                            <Link to=\"/tasd_project/cards\"><Button className=\"my-btn\">Back to Cards</Button></Link>\r\n                        </div>\r\n\r\n                        <div className=\"col-md offset-md-4 col-sm-12\">\r\n                            <h1>{card.name}</h1>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md col-sm-12\">\r\n                            <div class=\"flip-card\">\r\n                                <div class=\"flip-card-front\">\r\n                                    <img src={cardImage}/>\r\n                                </div>\r\n                                <div class=\"flip-card-back\">\r\n                                    <img src={cardback}/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md  col-sm-12\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-12\">\r\n                                    <Table borderless dark>\r\n                                        <tbody>\r\n                                        <tr>\r\n                                            <th>Type</th>\r\n                                            <td>{card.type}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <th>Race</th>\r\n                                            <td>{card.race}</td>\r\n                                        </tr>\r\n                                        </tbody>\r\n                                    </Table>\r\n                                </div>\r\n                                {atkDef}\r\n                                <hr/>\r\n                                <div className=\"col-12\">\r\n                                    Description\r\n                                    <p>\r\n                                        <br/>\r\n                                        {card.desc}\r\n                                    </p>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default YugiohCardDetails;","export default __webpack_public_path__ + \"static/media/logo_unimib.7b214daf.png\";","export default __webpack_public_path__ + \"static/media/logo_disco.4d979555.png\";","import React from \"react\";\r\nimport './Footer.css';\r\nimport first_logo from '../../assets/img/logo_unimib.png';\r\nimport second_logo from '../../assets/img/logo_disco.png';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n/*\r\n    This is a stateless component which sets the footer of the web application.\r\n    The footer is composed by Navlink in order to lead to the corrected url.\r\n\r\n*/\r\n\r\nfunction Footer(props) {\r\n    const lastLineText = props.lastLineText;\r\n    const first_logo_url = props.first_logo_url;\r\n    const second_logo_url = props.second_logo_url;\r\n    const pageListItem = props.pageListItem;\r\n\r\n    const listItems = pageListItem.map((item) => {\r\n        return (\r\n            <li className=\"nav-item\">\r\n                <NavLink to={item.url} className=\"footer-link\">\r\n                    {item.text}\r\n                </NavLink>\r\n            </li>\r\n        );\r\n    });\r\n// This loop is needed to create a void space.\r\n    const brSpaces = [];\r\n    for (let i = 0; i < 5; ++i) {\r\n        brSpaces.push(<br/>)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {brSpaces}\r\n            <footer>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-1 col-sm-12 text-center d-md-flex justify-content-start\">\r\n                            <ul className=\"nav flex-column\">\r\n                                {listItems}\r\n                            </ul>\r\n                        </div>\r\n\r\n                        <div className=\"col-md-3 offset-md-8 col-sm-12 text-center d-md-flex justify-content-end\"\r\n                             id=\"col-logos\">\r\n                            <a href={first_logo_url}><img src={first_logo}/></a>\r\n                            <a href={second_logo_url}><img src={second_logo}/></a>\r\n                        </div>\r\n                        <hr/>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12 text-center\">\r\n                                {lastLineText}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </footer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Footer;","export default __webpack_public_path__ + \"static/media/logo.7f28e813.png\";","import React, {useState} from \"react\";\r\nimport {Collapse, Nav, Navbar, NavbarBrand, NavbarToggler, NavItem} from 'reactstrap';\r\nimport './Header.css';\r\nimport logo from '../../assets/img/logo.png';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n/*\r\n    This is a statefull component which sets the header of the web application.\r\n    The Header is composed by a navbar and navItems which are the section of the menu\r\n    and the related links.\r\n*/\r\nfunction Header(props) {\r\n    const [isToogleOpen, setIsToogleOpen] = useState(false);\r\n    const pageListItem = props.pageListItem;\r\n    const listItems = pageListItem.map((item) => {\r\n        return (\r\n            <NavItem>\r\n                <NavLink to={item.url} className=\"nav-link header-link\">\r\n                    {item.text}\r\n                </NavLink>\r\n            </NavItem>\r\n        );\r\n    });\r\n\r\n    // This loop is needed to creare a void space.\r\n    const brSpaces = [];\r\n    for (let i = 0; i < 3; ++i) {\r\n        brSpaces.push(<br/>)\r\n    }\r\n\r\n    //The NavbarToggler component of reacstrap is needed to manage the mobile mode of the navbar\r\n    return (\r\n        <>\r\n            <Navbar dark full expand=\"md\" fixed=\"top\">\r\n                <NavbarBrand>\r\n                    <NavLink to=\"/\">\r\n                        <img src={logo}/>\r\n                    </NavLink>\r\n                </NavbarBrand>\r\n                <NavbarToggler onClick={() => setIsToogleOpen(!isToogleOpen)}/>\r\n                <Collapse isOpen={isToogleOpen} navbar>\r\n                    <Nav className=\"ml-auto container-fluid\" navbar>\r\n                        {listItems}\r\n                    </Nav>\r\n                </Collapse>\r\n            </Navbar>\r\n            {brSpaces}\r\n        </ >\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport Footer from \"../footer/Footer\";\r\nimport Header from \"../header/Header\";\r\n\r\nfunction MainTemplate(props) {\r\n    const pageBody = props.children;\r\n    const lastLineText = props.lastLineText;\r\n    const first_logo_url = props.first_logo_url;\r\n    const second_logo_url = props.second_logo_url;\r\n    const pageListItem = props.pageListItem;\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                pageListItem={pageListItem}\r\n            />\r\n            {pageBody}\r\n            <Footer\r\n                lastLineText={lastLineText}\r\n                first_logo_url={first_logo_url}\r\n                second_logo_url={second_logo_url}\r\n                pageListItem={pageListItem}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MainTemplate;","import './App.css';\r\nimport React from 'react';\r\nimport {BrowserRouter, Route, Routes} from 'react-router-dom';\r\nimport Home from './views/home/Home';\r\nimport Cards from './views/cards/Cards';\r\nimport About from './views/about/About';\r\nimport YugiohCardDetails from './views/yugiohCardDetails/YugiohCardDetails';\r\nimport MainTemplate from './components/mainTemplate/MainTemplate';\r\n\r\nfunction App() {\r\n    /*Footer data*/\r\n    const lastLineText = 'Project realized by Nada Cenci for Technologies and Applications of Distributed Systems course - 2021/2022';\r\n    const first_logo_url = 'https://www.unimib.it/';\r\n    const second_logo_url = 'https://www.disco.unimib.it/it';\r\n\r\n    /*Menu data*/\r\n    const pageListItem = [\r\n        {\r\n            text: \"Home\",\r\n            url: \"tasd_project/\"\r\n        },\r\n        {\r\n            text: \"Cards\",\r\n            url: \"tasd_project/cards\"\r\n        },\r\n        {\r\n            text: \"About\",\r\n            url: \"tasd_project/about\"\r\n        }\r\n    ];\r\n\r\n    const apiUrl = 'https://db.ygoprodeck.com/api/v7/cardinfo.php';\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <MainTemplate\r\n                lastLineText={lastLineText}\r\n                first_logo_url={first_logo_url}\r\n                second_logo_url={second_logo_url}\r\n                pageListItem={pageListItem}\r\n            >\r\n                <Routes>\r\n                    <Route exact path=\"tasd_project/\" element={<Home apiUrl={apiUrl}/>}/>\r\n                    <Route exact path=\"tasd_project/cards/\" element={<Cards apiUrl={apiUrl}/>}/>\r\n                    <Route exact path=\"tasd_project/cards/:deck\" element={<Cards apiUrl={apiUrl}/>}/>\r\n                    <Route exact path=\"tasd_project/card/:id\" element={<YugiohCardDetails apiUrl={apiUrl}/>}/>\r\n                    <Route exact path=\"tasd_project/about\" element={<About/>}/>\r\n                </Routes>\r\n            </MainTemplate>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}